# Ancel BM300 Pro Battery Monitor - tested on ESPHome 2025.8.4
# https://github.com/slydiman/bm7-battery-monitor
# Based on the following code:
# https://github.com/JeffWDH/bm6-battery-monitor

esphome:
  includes:
    - "bm7.h"

esp32:
  board: esp32dev
  framework:
#    type: arduino
    type: esp-idf

logger:

ota:
- platform: esphome

##################################################################
# Add your ESPHome config above this line                        #
# Make sure to keep the bm7.h include line under esphome section #
# Also update the mac_address and interval lines below           #
##################################################################

esp32_ble_tracker:
  scan_parameters:
    continuous: false
    duration: 5s

ble_client:
  - id: bm7
    mac_address: 00:00:00:00:00:00 # Put your Ancel BM300 Pro address here
    auto_connect: false
    on_connect:
      # Disconnect in case there was a hung connection due to poor signal
      - delay: 15s
      - ble_client.disconnect: bm7

sensor:
  - platform: uptime
    name: ble_m7_uptime
    id: ble_m7_uptime
    update_interval: 60s

  - platform: template
    name: "Temperature"
    id: temperature
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    accuracy_decimals: 0

  - platform: template
    name: "Voltage"
    id: voltage
    unit_of_measurement: "V"
    icon: "mdi:car-battery"
    accuracy_decimals: 2
    
  - platform: template
    name: "SoC"
    id: soc
    unit_of_measurement: "%"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    
  - platform: ble_client
    type: characteristic
    ble_client_id: bm7
    name: "bm7"
    service_uuid: 0000fff0-0000-1000-8000-00805f9b34fb
    characteristic_uuid: 0000fff4-0000-1000-8000-00805f9b34fb
    notify: true
    internal: true
    update_interval: never
    lambda: |-
      mbedtls_aes_context aes;
      mbedtls_aes_init(&aes);
      unsigned char output[16];
      unsigned char key[16] = { 108, 101, 97, 103, 101, 110, 100, 255, 254, 48, 49, 48, 48, 48, 48, 64 };
      unsigned char iv[16] = {};
      mbedtls_aes_setkey_dec(&aes, key, 128);
      mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, 16, iv, (uint8_t*)&x[0], output);
      mbedtls_aes_free(&aes);

      int tempC;
      if (output[3] == 1) {
        tempC = -output[4];
      } else {
        tempC = output[4];
      }
      float socp = output[6] *1.0f;
      float volts = ((output[7] << 8) | output[8]) / 100.0f;
      
      if (volts > 0) {
        id(temperature).publish_state(tempC);
        id(voltage).publish_state(volts);
        id(soc).publish_state(socp);
        id(bm7).disconnect();
      }
      
      return 0;

interval:
  - interval: 1min # How often you want to poll the Ancel BM300 Pro
    then:
      - if:
          condition:
            # Polling every minute if voltage is above 13.0V, otherwise every 30 min.
            - lambda: 'return (id(voltage).state == 0.0) || (id(voltage).state > 13.0) || ((static_cast<int>(id(ble_m7_uptime).state) / 60) % 30 == 0);'
          then:
            - esp32_ble_tracker.start_scan:
            - delay: 7s
            - esp32_ble_tracker.stop_scan:
            - ble_client.connect: bm7
            - delay: 1s
            - ble_client.ble_write:
                id: bm7
                service_uuid: 0000fff0-0000-1000-8000-00805f9b34fb
                characteristic_uuid: 0000fff3-0000-1000-8000-00805f9b34fb
                value: [0x58, 0x6d, 0x7b, 0x23, 0x77, 0xc6, 0x92, 0x4d, 0xcd, 0x75, 0x0a, 0xcb, 0x29, 0xf5, 0xbf, 0x8d] # Encrypted "d1550700000000000000000000000000" 
